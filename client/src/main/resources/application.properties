spring.datasource.url = jdbc:mysql://localhost:3306/ro3d_db?useUnicode=true&characterEncoding=UTF-8&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC&useSSL=false
spring.datasource.username = root
spring.datasource.password = admin

server.port=8080

spring.jpa.show-sql = true
spring.jpa.hibernate.ddl-auto = update
spring.jpa.properties.hibernate.naming.strategy= org.hibernate.cfg.ImprovedNamingStrategy
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5Dialect

spring.security.oauth2.client.registration.auth-server.client-id=ro3d_clientid
spring.security.oauth2.client.registration.auth-server.client-secret=secret
spring.security.oauth2.client.registration.auth-server.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.auth-server.client-name=Auth server
spring.security.oauth2.client.registration.auth-server.scope=user
spring.security.oauth2.client.registration.auth-server.redirect-uri-template=/home
spring.security.oauth2.client.provider.auth-server.authorization-uri=http://localhost:4040/auth/oauth/authorize
spring.security.oauth2.client.provider.auth-server.token-uri=http://localhost:4040/auth/oauth/token
spring.security.oauth2.client.provider.auth-server.user-info-uri=http://localhost:4040/auth/user/me

spring.thymeleaf.cache= false

jdbc.auth.queries.users-query=select email, password, active from user where email=?
jdbc.auth.queries.roles-query=select u.email, r.role from user u inner join user_role ur on(u.user_id=ur.user_id) inner join role r on(ur.role_id=r.role_id) where u.email=?